
1. Introduction
2. Installing
3. Running
4. Examples

1. Introduction

This distribution includes packages for communicating with the Amazon Web
Services.  The aws package is the core package. The aws API is used to create a
request object, set params, queue the request, wait for the request, and
destroy the request object. This package provides a convenient S3 API
as wrappers to the aws API.


2. Installing

Copy the distribution directory to the directory that contains the Tcl lib
AOlserver is linked against:

    % cp -r nsaws.x.x /usr/local/aolserver/lib


3. Running the s3 package

Use the Tcl "package" command to load the package. You do not need to 
explicitly load the aws package. It will be auto-loaded when s3 is loaded:

    package require s3

Configure the aws package to use your own public and private keys.  These 
settings persist for the life of the interpreter. By doing this in the main 
thread, the conns and other threads will clone these settings when created:

    aws::setConfig publicKey xxxxxxxxxxxxxxxxxx
    aws::setConfig privateKey xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

You can also set a default request timeout and debug flag. When debug is
enabled the request params and headers will be logged in the server log when
the request is queued. The default timeout will be used if there is no
timeout param set in the request object:

    aws::setConfig timeout 1
    aws::setConfig debug 1

If you want a separate timeout for S3 request you can also set an S3
specific timeout.  The request object's timeout param will override both the
aws and S3 default timeout settings:

    s3::setConfig timeout 2

4. Examples

4.1 Creating a bucket

    nscp 1> s3::createRequest
    aws0

    nscp 2> s3::setParam aws0 action createBucket
    createBucket

    nscp 3> s3::setParam aws0 bucket mynewbucket
    mynewbucket

    nscp 5> s3::queue aws0
    http0

    nscp 6> s3::wait http0 result status [set setid [ns_set create]]

    nscp 7> set result

    nscp 8> set status
    200

    nscp 9> ns_set print $setid
    HTTP/1.1 200 OK:
    x-amz-id-2 = VtW1pZY8kqT3jAsLp8Iz6Swuj8n552SF2Qzde
    x-amz-request-id = 7616BCC
    date = Sat, 03 Mar 2007 23:23:44 GMT
    location = /mynewbucket
    content-length = 0
    connection = keep-alive
    server = AmazonS3

4.2 Write an object

    nscp 1> s3::createRequest
    aws0

    nscp 2> s3::setParam aws0 action writeObject
    writeObject

    nscp 3> s3::setParam aws0 bucket mynewbucket
    mynewbucket

    nscp 4> s3::setParam aws0 object mynewobject
    mynewobject

    nscp 5> s3::setParam aws0 data "Hello there."
    Hello there.

    nscp 6> s3::setHeader aws0 Content-Type text/plain       
    text/plain

    nscp 7> s3::queue aws0
    http0

    nscp 8> s3::wait http0 result status [set setid [ns_set create]]
    1

    nscp 9> set result

    nscp 10> set status
    200

    nscp 11> ns_set print $setid
    HTTP/1.1 200 OK:
    x-amz-id-2 = zMcxFKlaiZDsFYYvkoP0VSWtllR/eeYTtb0DaU7Uf7/LmiYbqXeHH
    x-amz-request-id = BAEB7B2FC303EB53
    date = Sat, 03 Mar 2007 23:33:37 GMT
    etag = "9d6a2963872077db674a27a39c492e61"
    content-length = 0
    connection = keep-alive
    server = AmazonS3